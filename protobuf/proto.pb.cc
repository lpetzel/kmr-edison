// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
class SetSignalLightDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SetSignalLight> {
} _SetSignalLight_default_instance_;
class MoveConveyorBeltDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MoveConveyorBelt> {
} _MoveConveyorBelt_default_instance_;
class BSPushBaseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<BSPushBase> {
} _BSPushBase_default_instance_;
class SSTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SSTask> {
} _SSTask_default_instance_;
class RSMountRingDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RSMountRing> {
} _RSMountRing_default_instance_;
class CSTaskDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CSTask> {
} _CSTask_default_instance_;
class DSActivateGateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DSActivateGate> {
} _DSActivateGate_default_instance_;
class MPSFinishedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MPSFinished> {
} _MPSFinished_default_instance_;
class MPSProductRetrivedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MPSProductRetrived> {
} _MPSProductRetrived_default_instance_;

namespace protobuf_proto_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[6];

}  // namespace

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, red_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, yellow_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SetSignalLight, green_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveConveyorBelt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveConveyorBelt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveConveyorBelt, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveConveyorBelt, direction_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoveConveyorBelt, stop_sensor_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSPushBase, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSPushBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSPushBase, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BSPushBase, slot_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSTask, ssop_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SSTask, ssfield_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMountRing, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMountRing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMountRing, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RSMountRing, feeder_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTask, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTask, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTask, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CSTask, operation_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSActivateGate, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSActivateGate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSActivateGate, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DSActivateGate, gate_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSFinished, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSFinished, id_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSProductRetrived, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSProductRetrived, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MPSProductRetrived, id_),
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 8, sizeof(SetSignalLight)},
  { 12, 19, sizeof(MoveConveyorBelt)},
  { 22, 28, sizeof(BSPushBase)},
  { 30, 37, sizeof(SSTask)},
  { 40, 46, sizeof(RSMountRing)},
  { 48, 54, sizeof(CSTask)},
  { 56, 62, sizeof(DSActivateGate)},
  { 64, 69, sizeof(MPSFinished)},
  { 70, 75, sizeof(MPSProductRetrived)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_SetSignalLight_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MoveConveyorBelt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_BSPushBase_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SSTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RSMountRing_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_CSTask_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_DSActivateGate_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MPSFinished_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MPSProductRetrived_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "proto.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace

void TableStruct::Shutdown() {
  _SetSignalLight_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MoveConveyorBelt_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _BSPushBase_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _SSTask_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _RSMountRing_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _CSTask_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _DSActivateGate_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _MPSFinished_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _MPSProductRetrived_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _SetSignalLight_default_instance_.DefaultConstruct();
  _MoveConveyorBelt_default_instance_.DefaultConstruct();
  _BSPushBase_default_instance_.DefaultConstruct();
  _SSTask_default_instance_.DefaultConstruct();
  _RSMountRing_default_instance_.DefaultConstruct();
  _CSTask_default_instance_.DefaultConstruct();
  _DSActivateGate_default_instance_.DefaultConstruct();
  _MPSFinished_default_instance_.DefaultConstruct();
  _MPSProductRetrived_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\013proto.proto\"o\n\016SetSignalLight\022\n\n\002ID\030\001 "
      "\002(\r\022\030\n\003red\030\002 \002(\0162\013.LightState\022\033\n\006yellow\030"
      "\003 \002(\0162\013.LightState\022\032\n\005green\030\004 \002(\0162\013.Ligh"
      "tState\"h\n\020MoveConveyorBelt\022\n\n\002ID\030\001 \002(\r\022%"
      "\n\tdirection\030\002 \002(\0162\022.ConveyorDirection\022!\n"
      "\013stop_sensor\030\003 \002(\0162\014.SensorOnMPS\"&\n\nBSPu"
      "shBase\022\n\n\002ID\030\001 \002(\r\022\014\n\004slot\030\002 \002(\r\"3\n\006SSTa"
      "sk\022\n\n\002ID\030\001 \002(\r\022\014\n\004SSOp\030\002 \002(\r\022\017\n\007SSField\030"
      "\003 \002(\r\")\n\013RSMountRing\022\n\n\002ID\030\001 \002(\r\022\016\n\006feed"
      "er\030\002 \002(\r\".\n\006CSTask\022\n\n\002ID\030\001 \002(\r\022\030\n\toperat"
      "ion\030\002 \002(\0162\005.CsOp\"*\n\016DSActivateGate\022\n\n\002ID"
      "\030\001 \002(\r\022\014\n\004gate\030\002 \002(\r\"\031\n\013MPSFinished\022\n\n\002I"
      "D\030\001 \002(\r\" \n\022MPSProductRetrived\022\n\n\002ID\030\001 \002("
      "\r*.\n\021ConveyorDirection\022\013\n\007FORWARD\020\001\022\014\n\010B"
      "ACKWARD\020\002*0\n\013SensorOnMPS\022\t\n\005INPUT\020\001\022\n\n\006O"
      "UTPUT\020\002\022\n\n\006MIDDLE\020\003*\036\n\004SSOp\022\t\n\005STORE\020\001\022\013"
      "\n\007RETRIVE\020\002*\023\n\007SSField\022\010\n\004TODO\020\001*\'\n\004CsOp"
      "\022\020\n\014RETRIEVE_CAP\020\001\022\r\n\tMOUNT_CAP\020\002*(\n\nLig"
      "htState\022\007\n\003OFF\020\000\022\006\n\002ON\020\001\022\t\n\005BLINK\020\002"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 755);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_proto_2eproto

const ::google::protobuf::EnumDescriptor* ConveyorDirection_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[0];
}
bool ConveyorDirection_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SensorOnMPS_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[1];
}
bool SensorOnMPS_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SSOp_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[2];
}
bool SSOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* SSField_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[3];
}
bool SSField_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CsOp_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[4];
}
bool CsOp_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* LightState_descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_enum_descriptors[5];
}
bool LightState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SetSignalLight::kIDFieldNumber;
const int SetSignalLight::kRedFieldNumber;
const int SetSignalLight::kYellowFieldNumber;
const int SetSignalLight::kGreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SetSignalLight::SetSignalLight()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SetSignalLight)
}
SetSignalLight::SetSignalLight(const SetSignalLight& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&green_) -
    reinterpret_cast<char*>(&id_) + sizeof(green_));
  // @@protoc_insertion_point(copy_constructor:SetSignalLight)
}

void SetSignalLight::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&green_) -
    reinterpret_cast<char*>(&id_) + sizeof(green_));
}

SetSignalLight::~SetSignalLight() {
  // @@protoc_insertion_point(destructor:SetSignalLight)
  SharedDtor();
}

void SetSignalLight::SharedDtor() {
}

void SetSignalLight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SetSignalLight::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[0].descriptor;
}

const SetSignalLight& SetSignalLight::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

SetSignalLight* SetSignalLight::New(::google::protobuf::Arena* arena) const {
  SetSignalLight* n = new SetSignalLight;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SetSignalLight::Clear() {
// @@protoc_insertion_point(message_clear_start:SetSignalLight)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&green_) -
      reinterpret_cast<char*>(&id_) + sizeof(green_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SetSignalLight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SetSignalLight)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .LightState red = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LightState_IsValid(value)) {
            set_red(static_cast< ::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .LightState yellow = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LightState_IsValid(value)) {
            set_yellow(static_cast< ::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .LightState green = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::LightState_IsValid(value)) {
            set_green(static_cast< ::LightState >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SetSignalLight)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SetSignalLight)
  return false;
#undef DO_
}

void SetSignalLight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SetSignalLight)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .LightState red = 2;
  if (has_red()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->red(), output);
  }

  // required .LightState yellow = 3;
  if (has_yellow()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->yellow(), output);
  }

  // required .LightState green = 4;
  if (has_green()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->green(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SetSignalLight)
}

::google::protobuf::uint8* SetSignalLight::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SetSignalLight)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .LightState red = 2;
  if (has_red()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->red(), target);
  }

  // required .LightState yellow = 3;
  if (has_yellow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->yellow(), target);
  }

  // required .LightState green = 4;
  if (has_green()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->green(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SetSignalLight)
  return target;
}

size_t SetSignalLight::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SetSignalLight)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_red()) {
    // required .LightState red = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());
  }

  if (has_yellow()) {
    // required .LightState yellow = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->yellow());
  }

  if (has_green()) {
    // required .LightState green = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->green());
  }

  return total_size;
}
size_t SetSignalLight::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SetSignalLight)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .LightState red = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->red());

    // required .LightState yellow = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->yellow());

    // required .LightState green = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->green());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SetSignalLight::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SetSignalLight)
  GOOGLE_DCHECK_NE(&from, this);
  const SetSignalLight* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SetSignalLight>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SetSignalLight)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SetSignalLight)
    MergeFrom(*source);
  }
}

void SetSignalLight::MergeFrom(const SetSignalLight& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SetSignalLight)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 15u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_red()) {
      set_red(from.red());
    }
    if (from.has_yellow()) {
      set_yellow(from.yellow());
    }
    if (from.has_green()) {
      set_green(from.green());
    }
  }
}

void SetSignalLight::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SetSignalLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SetSignalLight::CopyFrom(const SetSignalLight& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SetSignalLight)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetSignalLight::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  return true;
}

void SetSignalLight::Swap(SetSignalLight* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SetSignalLight::InternalSwap(SetSignalLight* other) {
  std::swap(id_, other->id_);
  std::swap(red_, other->red_);
  std::swap(yellow_, other->yellow_);
  std::swap(green_, other->green_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SetSignalLight::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[0];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SetSignalLight

// required uint32 ID = 1;
bool SetSignalLight::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SetSignalLight::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SetSignalLight::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SetSignalLight::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 SetSignalLight::id() const {
  // @@protoc_insertion_point(field_get:SetSignalLight.ID)
  return id_;
}
void SetSignalLight::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SetSignalLight.ID)
}

// required .LightState red = 2;
bool SetSignalLight::has_red() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SetSignalLight::set_has_red() {
  _has_bits_[0] |= 0x00000002u;
}
void SetSignalLight::clear_has_red() {
  _has_bits_[0] &= ~0x00000002u;
}
void SetSignalLight::clear_red() {
  red_ = 0;
  clear_has_red();
}
::LightState SetSignalLight::red() const {
  // @@protoc_insertion_point(field_get:SetSignalLight.red)
  return static_cast< ::LightState >(red_);
}
void SetSignalLight::set_red(::LightState value) {
  assert(::LightState_IsValid(value));
  set_has_red();
  red_ = value;
  // @@protoc_insertion_point(field_set:SetSignalLight.red)
}

// required .LightState yellow = 3;
bool SetSignalLight::has_yellow() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SetSignalLight::set_has_yellow() {
  _has_bits_[0] |= 0x00000004u;
}
void SetSignalLight::clear_has_yellow() {
  _has_bits_[0] &= ~0x00000004u;
}
void SetSignalLight::clear_yellow() {
  yellow_ = 0;
  clear_has_yellow();
}
::LightState SetSignalLight::yellow() const {
  // @@protoc_insertion_point(field_get:SetSignalLight.yellow)
  return static_cast< ::LightState >(yellow_);
}
void SetSignalLight::set_yellow(::LightState value) {
  assert(::LightState_IsValid(value));
  set_has_yellow();
  yellow_ = value;
  // @@protoc_insertion_point(field_set:SetSignalLight.yellow)
}

// required .LightState green = 4;
bool SetSignalLight::has_green() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SetSignalLight::set_has_green() {
  _has_bits_[0] |= 0x00000008u;
}
void SetSignalLight::clear_has_green() {
  _has_bits_[0] &= ~0x00000008u;
}
void SetSignalLight::clear_green() {
  green_ = 0;
  clear_has_green();
}
::LightState SetSignalLight::green() const {
  // @@protoc_insertion_point(field_get:SetSignalLight.green)
  return static_cast< ::LightState >(green_);
}
void SetSignalLight::set_green(::LightState value) {
  assert(::LightState_IsValid(value));
  set_has_green();
  green_ = value;
  // @@protoc_insertion_point(field_set:SetSignalLight.green)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MoveConveyorBelt::kIDFieldNumber;
const int MoveConveyorBelt::kDirectionFieldNumber;
const int MoveConveyorBelt::kStopSensorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MoveConveyorBelt::MoveConveyorBelt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MoveConveyorBelt)
}
MoveConveyorBelt::MoveConveyorBelt(const MoveConveyorBelt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&stop_sensor_) -
    reinterpret_cast<char*>(&id_) + sizeof(stop_sensor_));
  // @@protoc_insertion_point(copy_constructor:MoveConveyorBelt)
}

void MoveConveyorBelt::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  direction_ = 1;
  stop_sensor_ = 1;
}

MoveConveyorBelt::~MoveConveyorBelt() {
  // @@protoc_insertion_point(destructor:MoveConveyorBelt)
  SharedDtor();
}

void MoveConveyorBelt::SharedDtor() {
}

void MoveConveyorBelt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoveConveyorBelt::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[1].descriptor;
}

const MoveConveyorBelt& MoveConveyorBelt::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

MoveConveyorBelt* MoveConveyorBelt::New(::google::protobuf::Arena* arena) const {
  MoveConveyorBelt* n = new MoveConveyorBelt;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MoveConveyorBelt::Clear() {
// @@protoc_insertion_point(message_clear_start:MoveConveyorBelt)
  if (_has_bits_[0 / 32] & 7u) {
    id_ = 0u;
    direction_ = 1;
    stop_sensor_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MoveConveyorBelt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MoveConveyorBelt)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .ConveyorDirection direction = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::ConveyorDirection_IsValid(value)) {
            set_direction(static_cast< ::ConveyorDirection >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .SensorOnMPS stop_sensor = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::SensorOnMPS_IsValid(value)) {
            set_stop_sensor(static_cast< ::SensorOnMPS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MoveConveyorBelt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MoveConveyorBelt)
  return false;
#undef DO_
}

void MoveConveyorBelt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MoveConveyorBelt)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .ConveyorDirection direction = 2;
  if (has_direction()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->direction(), output);
  }

  // required .SensorOnMPS stop_sensor = 3;
  if (has_stop_sensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->stop_sensor(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MoveConveyorBelt)
}

::google::protobuf::uint8* MoveConveyorBelt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MoveConveyorBelt)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .ConveyorDirection direction = 2;
  if (has_direction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->direction(), target);
  }

  // required .SensorOnMPS stop_sensor = 3;
  if (has_stop_sensor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->stop_sensor(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MoveConveyorBelt)
  return target;
}

size_t MoveConveyorBelt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:MoveConveyorBelt)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_direction()) {
    // required .ConveyorDirection direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());
  }

  if (has_stop_sensor()) {
    // required .SensorOnMPS stop_sensor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stop_sensor());
  }

  return total_size;
}
size_t MoveConveyorBelt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MoveConveyorBelt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .ConveyorDirection direction = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->direction());

    // required .SensorOnMPS stop_sensor = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->stop_sensor());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoveConveyorBelt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MoveConveyorBelt)
  GOOGLE_DCHECK_NE(&from, this);
  const MoveConveyorBelt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MoveConveyorBelt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MoveConveyorBelt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MoveConveyorBelt)
    MergeFrom(*source);
  }
}

void MoveConveyorBelt::MergeFrom(const MoveConveyorBelt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MoveConveyorBelt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_direction()) {
      set_direction(from.direction());
    }
    if (from.has_stop_sensor()) {
      set_stop_sensor(from.stop_sensor());
    }
  }
}

void MoveConveyorBelt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MoveConveyorBelt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoveConveyorBelt::CopyFrom(const MoveConveyorBelt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MoveConveyorBelt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoveConveyorBelt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void MoveConveyorBelt::Swap(MoveConveyorBelt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MoveConveyorBelt::InternalSwap(MoveConveyorBelt* other) {
  std::swap(id_, other->id_);
  std::swap(direction_, other->direction_);
  std::swap(stop_sensor_, other->stop_sensor_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MoveConveyorBelt::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[1];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MoveConveyorBelt

// required uint32 ID = 1;
bool MoveConveyorBelt::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MoveConveyorBelt::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MoveConveyorBelt::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MoveConveyorBelt::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MoveConveyorBelt::id() const {
  // @@protoc_insertion_point(field_get:MoveConveyorBelt.ID)
  return id_;
}
void MoveConveyorBelt::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MoveConveyorBelt.ID)
}

// required .ConveyorDirection direction = 2;
bool MoveConveyorBelt::has_direction() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MoveConveyorBelt::set_has_direction() {
  _has_bits_[0] |= 0x00000002u;
}
void MoveConveyorBelt::clear_has_direction() {
  _has_bits_[0] &= ~0x00000002u;
}
void MoveConveyorBelt::clear_direction() {
  direction_ = 1;
  clear_has_direction();
}
::ConveyorDirection MoveConveyorBelt::direction() const {
  // @@protoc_insertion_point(field_get:MoveConveyorBelt.direction)
  return static_cast< ::ConveyorDirection >(direction_);
}
void MoveConveyorBelt::set_direction(::ConveyorDirection value) {
  assert(::ConveyorDirection_IsValid(value));
  set_has_direction();
  direction_ = value;
  // @@protoc_insertion_point(field_set:MoveConveyorBelt.direction)
}

// required .SensorOnMPS stop_sensor = 3;
bool MoveConveyorBelt::has_stop_sensor() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MoveConveyorBelt::set_has_stop_sensor() {
  _has_bits_[0] |= 0x00000004u;
}
void MoveConveyorBelt::clear_has_stop_sensor() {
  _has_bits_[0] &= ~0x00000004u;
}
void MoveConveyorBelt::clear_stop_sensor() {
  stop_sensor_ = 1;
  clear_has_stop_sensor();
}
::SensorOnMPS MoveConveyorBelt::stop_sensor() const {
  // @@protoc_insertion_point(field_get:MoveConveyorBelt.stop_sensor)
  return static_cast< ::SensorOnMPS >(stop_sensor_);
}
void MoveConveyorBelt::set_stop_sensor(::SensorOnMPS value) {
  assert(::SensorOnMPS_IsValid(value));
  set_has_stop_sensor();
  stop_sensor_ = value;
  // @@protoc_insertion_point(field_set:MoveConveyorBelt.stop_sensor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BSPushBase::kIDFieldNumber;
const int BSPushBase::kSlotFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BSPushBase::BSPushBase()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:BSPushBase)
}
BSPushBase::BSPushBase(const BSPushBase& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&id_) + sizeof(slot_));
  // @@protoc_insertion_point(copy_constructor:BSPushBase)
}

void BSPushBase::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&slot_) -
    reinterpret_cast<char*>(&id_) + sizeof(slot_));
}

BSPushBase::~BSPushBase() {
  // @@protoc_insertion_point(destructor:BSPushBase)
  SharedDtor();
}

void BSPushBase::SharedDtor() {
}

void BSPushBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BSPushBase::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[2].descriptor;
}

const BSPushBase& BSPushBase::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

BSPushBase* BSPushBase::New(::google::protobuf::Arena* arena) const {
  BSPushBase* n = new BSPushBase;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BSPushBase::Clear() {
// @@protoc_insertion_point(message_clear_start:BSPushBase)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&slot_) -
      reinterpret_cast<char*>(&id_) + sizeof(slot_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BSPushBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:BSPushBase)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 slot = 2;
      case 2: {
        if (tag == 16u) {
          set_has_slot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slot_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:BSPushBase)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:BSPushBase)
  return false;
#undef DO_
}

void BSPushBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:BSPushBase)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 slot = 2;
  if (has_slot()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->slot(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:BSPushBase)
}

::google::protobuf::uint8* BSPushBase::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:BSPushBase)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 slot = 2;
  if (has_slot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->slot(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:BSPushBase)
  return target;
}

size_t BSPushBase::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:BSPushBase)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_slot()) {
    // required uint32 slot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());
  }

  return total_size;
}
size_t BSPushBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:BSPushBase)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 slot = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->slot());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BSPushBase::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:BSPushBase)
  GOOGLE_DCHECK_NE(&from, this);
  const BSPushBase* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BSPushBase>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:BSPushBase)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:BSPushBase)
    MergeFrom(*source);
  }
}

void BSPushBase::MergeFrom(const BSPushBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:BSPushBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_slot()) {
      set_slot(from.slot());
    }
  }
}

void BSPushBase::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:BSPushBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BSPushBase::CopyFrom(const BSPushBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:BSPushBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BSPushBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void BSPushBase::Swap(BSPushBase* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BSPushBase::InternalSwap(BSPushBase* other) {
  std::swap(id_, other->id_);
  std::swap(slot_, other->slot_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BSPushBase::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[2];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BSPushBase

// required uint32 ID = 1;
bool BSPushBase::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void BSPushBase::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void BSPushBase::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void BSPushBase::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 BSPushBase::id() const {
  // @@protoc_insertion_point(field_get:BSPushBase.ID)
  return id_;
}
void BSPushBase::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:BSPushBase.ID)
}

// required uint32 slot = 2;
bool BSPushBase::has_slot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void BSPushBase::set_has_slot() {
  _has_bits_[0] |= 0x00000002u;
}
void BSPushBase::clear_has_slot() {
  _has_bits_[0] &= ~0x00000002u;
}
void BSPushBase::clear_slot() {
  slot_ = 0u;
  clear_has_slot();
}
::google::protobuf::uint32 BSPushBase::slot() const {
  // @@protoc_insertion_point(field_get:BSPushBase.slot)
  return slot_;
}
void BSPushBase::set_slot(::google::protobuf::uint32 value) {
  set_has_slot();
  slot_ = value;
  // @@protoc_insertion_point(field_set:BSPushBase.slot)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SSTask::kIDFieldNumber;
const int SSTask::kSSOpFieldNumber;
const int SSTask::kSSFieldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SSTask::SSTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:SSTask)
}
SSTask::SSTask(const SSTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&ssfield_) -
    reinterpret_cast<char*>(&id_) + sizeof(ssfield_));
  // @@protoc_insertion_point(copy_constructor:SSTask)
}

void SSTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&ssfield_) -
    reinterpret_cast<char*>(&id_) + sizeof(ssfield_));
}

SSTask::~SSTask() {
  // @@protoc_insertion_point(destructor:SSTask)
  SharedDtor();
}

void SSTask::SharedDtor() {
}

void SSTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SSTask::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[3].descriptor;
}

const SSTask& SSTask::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

SSTask* SSTask::New(::google::protobuf::Arena* arena) const {
  SSTask* n = new SSTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SSTask::Clear() {
// @@protoc_insertion_point(message_clear_start:SSTask)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&ssfield_) -
      reinterpret_cast<char*>(&id_) + sizeof(ssfield_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SSTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SSTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SSOp = 2;
      case 2: {
        if (tag == 16u) {
          set_has_ssop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 SSField = 3;
      case 3: {
        if (tag == 24u) {
          set_has_ssfield();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ssfield_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SSTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SSTask)
  return false;
#undef DO_
}

void SSTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SSTask)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 SSOp = 2;
  if (has_ssop()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ssop(), output);
  }

  // required uint32 SSField = 3;
  if (has_ssfield()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ssfield(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:SSTask)
}

::google::protobuf::uint8* SSTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SSTask)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 SSOp = 2;
  if (has_ssop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ssop(), target);
  }

  // required uint32 SSField = 3;
  if (has_ssfield()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ssfield(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SSTask)
  return target;
}

size_t SSTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:SSTask)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_ssop()) {
    // required uint32 SSOp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ssop());
  }

  if (has_ssfield()) {
    // required uint32 SSField = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ssfield());
  }

  return total_size;
}
size_t SSTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SSTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 SSOp = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ssop());

    // required uint32 SSField = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ssfield());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SSTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SSTask)
  GOOGLE_DCHECK_NE(&from, this);
  const SSTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SSTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SSTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SSTask)
    MergeFrom(*source);
  }
}

void SSTask::MergeFrom(const SSTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SSTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 7u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ssop()) {
      set_ssop(from.ssop());
    }
    if (from.has_ssfield()) {
      set_ssfield(from.ssfield());
    }
  }
}

void SSTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SSTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SSTask::CopyFrom(const SSTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SSTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SSTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  return true;
}

void SSTask::Swap(SSTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SSTask::InternalSwap(SSTask* other) {
  std::swap(id_, other->id_);
  std::swap(ssop_, other->ssop_);
  std::swap(ssfield_, other->ssfield_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SSTask::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[3];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SSTask

// required uint32 ID = 1;
bool SSTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SSTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SSTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SSTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 SSTask::id() const {
  // @@protoc_insertion_point(field_get:SSTask.ID)
  return id_;
}
void SSTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:SSTask.ID)
}

// required uint32 SSOp = 2;
bool SSTask::has_ssop() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SSTask::set_has_ssop() {
  _has_bits_[0] |= 0x00000002u;
}
void SSTask::clear_has_ssop() {
  _has_bits_[0] &= ~0x00000002u;
}
void SSTask::clear_ssop() {
  ssop_ = 0u;
  clear_has_ssop();
}
::google::protobuf::uint32 SSTask::ssop() const {
  // @@protoc_insertion_point(field_get:SSTask.SSOp)
  return ssop_;
}
void SSTask::set_ssop(::google::protobuf::uint32 value) {
  set_has_ssop();
  ssop_ = value;
  // @@protoc_insertion_point(field_set:SSTask.SSOp)
}

// required uint32 SSField = 3;
bool SSTask::has_ssfield() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SSTask::set_has_ssfield() {
  _has_bits_[0] |= 0x00000004u;
}
void SSTask::clear_has_ssfield() {
  _has_bits_[0] &= ~0x00000004u;
}
void SSTask::clear_ssfield() {
  ssfield_ = 0u;
  clear_has_ssfield();
}
::google::protobuf::uint32 SSTask::ssfield() const {
  // @@protoc_insertion_point(field_get:SSTask.SSField)
  return ssfield_;
}
void SSTask::set_ssfield(::google::protobuf::uint32 value) {
  set_has_ssfield();
  ssfield_ = value;
  // @@protoc_insertion_point(field_set:SSTask.SSField)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RSMountRing::kIDFieldNumber;
const int RSMountRing::kFeederFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RSMountRing::RSMountRing()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:RSMountRing)
}
RSMountRing::RSMountRing(const RSMountRing& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&feeder_) -
    reinterpret_cast<char*>(&id_) + sizeof(feeder_));
  // @@protoc_insertion_point(copy_constructor:RSMountRing)
}

void RSMountRing::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&feeder_) -
    reinterpret_cast<char*>(&id_) + sizeof(feeder_));
}

RSMountRing::~RSMountRing() {
  // @@protoc_insertion_point(destructor:RSMountRing)
  SharedDtor();
}

void RSMountRing::SharedDtor() {
}

void RSMountRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RSMountRing::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[4].descriptor;
}

const RSMountRing& RSMountRing::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

RSMountRing* RSMountRing::New(::google::protobuf::Arena* arena) const {
  RSMountRing* n = new RSMountRing;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RSMountRing::Clear() {
// @@protoc_insertion_point(message_clear_start:RSMountRing)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&feeder_) -
      reinterpret_cast<char*>(&id_) + sizeof(feeder_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RSMountRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RSMountRing)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 feeder = 2;
      case 2: {
        if (tag == 16u) {
          set_has_feeder();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &feeder_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RSMountRing)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RSMountRing)
  return false;
#undef DO_
}

void RSMountRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RSMountRing)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 feeder = 2;
  if (has_feeder()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->feeder(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:RSMountRing)
}

::google::protobuf::uint8* RSMountRing::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RSMountRing)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 feeder = 2;
  if (has_feeder()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->feeder(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RSMountRing)
  return target;
}

size_t RSMountRing::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:RSMountRing)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_feeder()) {
    // required uint32 feeder = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->feeder());
  }

  return total_size;
}
size_t RSMountRing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RSMountRing)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 feeder = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->feeder());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RSMountRing::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RSMountRing)
  GOOGLE_DCHECK_NE(&from, this);
  const RSMountRing* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RSMountRing>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RSMountRing)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RSMountRing)
    MergeFrom(*source);
  }
}

void RSMountRing::MergeFrom(const RSMountRing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RSMountRing)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_feeder()) {
      set_feeder(from.feeder());
    }
  }
}

void RSMountRing::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RSMountRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RSMountRing::CopyFrom(const RSMountRing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RSMountRing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMountRing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void RSMountRing::Swap(RSMountRing* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RSMountRing::InternalSwap(RSMountRing* other) {
  std::swap(id_, other->id_);
  std::swap(feeder_, other->feeder_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RSMountRing::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[4];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RSMountRing

// required uint32 ID = 1;
bool RSMountRing::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RSMountRing::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RSMountRing::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RSMountRing::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 RSMountRing::id() const {
  // @@protoc_insertion_point(field_get:RSMountRing.ID)
  return id_;
}
void RSMountRing::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:RSMountRing.ID)
}

// required uint32 feeder = 2;
bool RSMountRing::has_feeder() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RSMountRing::set_has_feeder() {
  _has_bits_[0] |= 0x00000002u;
}
void RSMountRing::clear_has_feeder() {
  _has_bits_[0] &= ~0x00000002u;
}
void RSMountRing::clear_feeder() {
  feeder_ = 0u;
  clear_has_feeder();
}
::google::protobuf::uint32 RSMountRing::feeder() const {
  // @@protoc_insertion_point(field_get:RSMountRing.feeder)
  return feeder_;
}
void RSMountRing::set_feeder(::google::protobuf::uint32 value) {
  set_has_feeder();
  feeder_ = value;
  // @@protoc_insertion_point(field_set:RSMountRing.feeder)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CSTask::kIDFieldNumber;
const int CSTask::kOperationFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CSTask::CSTask()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:CSTask)
}
CSTask::CSTask(const CSTask& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&id_) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:CSTask)
}

void CSTask::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  operation_ = 1;
}

CSTask::~CSTask() {
  // @@protoc_insertion_point(destructor:CSTask)
  SharedDtor();
}

void CSTask::SharedDtor() {
}

void CSTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CSTask::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[5].descriptor;
}

const CSTask& CSTask::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

CSTask* CSTask::New(::google::protobuf::Arena* arena) const {
  CSTask* n = new CSTask;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CSTask::Clear() {
// @@protoc_insertion_point(message_clear_start:CSTask)
  if (_has_bits_[0 / 32] & 3u) {
    id_ = 0u;
    operation_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CSTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CSTask)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .CsOp operation = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CsOp_IsValid(value)) {
            set_operation(static_cast< ::CsOp >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CSTask)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CSTask)
  return false;
#undef DO_
}

void CSTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CSTask)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required .CsOp operation = 2;
  if (has_operation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->operation(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CSTask)
}

::google::protobuf::uint8* CSTask::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:CSTask)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required .CsOp operation = 2;
  if (has_operation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->operation(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CSTask)
  return target;
}

size_t CSTask::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:CSTask)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_operation()) {
    // required .CsOp operation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());
  }

  return total_size;
}
size_t CSTask::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:CSTask)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required .CsOp operation = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->operation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CSTask::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:CSTask)
  GOOGLE_DCHECK_NE(&from, this);
  const CSTask* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CSTask>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:CSTask)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:CSTask)
    MergeFrom(*source);
  }
}

void CSTask::MergeFrom(const CSTask& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:CSTask)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_operation()) {
      set_operation(from.operation());
    }
  }
}

void CSTask::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:CSTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CSTask::CopyFrom(const CSTask& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:CSTask)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CSTask::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void CSTask::Swap(CSTask* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CSTask::InternalSwap(CSTask* other) {
  std::swap(id_, other->id_);
  std::swap(operation_, other->operation_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CSTask::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[5];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CSTask

// required uint32 ID = 1;
bool CSTask::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CSTask::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CSTask::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CSTask::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 CSTask::id() const {
  // @@protoc_insertion_point(field_get:CSTask.ID)
  return id_;
}
void CSTask::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:CSTask.ID)
}

// required .CsOp operation = 2;
bool CSTask::has_operation() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CSTask::set_has_operation() {
  _has_bits_[0] |= 0x00000002u;
}
void CSTask::clear_has_operation() {
  _has_bits_[0] &= ~0x00000002u;
}
void CSTask::clear_operation() {
  operation_ = 1;
  clear_has_operation();
}
::CsOp CSTask::operation() const {
  // @@protoc_insertion_point(field_get:CSTask.operation)
  return static_cast< ::CsOp >(operation_);
}
void CSTask::set_operation(::CsOp value) {
  assert(::CsOp_IsValid(value));
  set_has_operation();
  operation_ = value;
  // @@protoc_insertion_point(field_set:CSTask.operation)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DSActivateGate::kIDFieldNumber;
const int DSActivateGate::kGateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DSActivateGate::DSActivateGate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:DSActivateGate)
}
DSActivateGate::DSActivateGate(const DSActivateGate& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    reinterpret_cast<char*>(&gate_) -
    reinterpret_cast<char*>(&id_) + sizeof(gate_));
  // @@protoc_insertion_point(copy_constructor:DSActivateGate)
}

void DSActivateGate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&id_, 0, reinterpret_cast<char*>(&gate_) -
    reinterpret_cast<char*>(&id_) + sizeof(gate_));
}

DSActivateGate::~DSActivateGate() {
  // @@protoc_insertion_point(destructor:DSActivateGate)
  SharedDtor();
}

void DSActivateGate::SharedDtor() {
}

void DSActivateGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DSActivateGate::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[6].descriptor;
}

const DSActivateGate& DSActivateGate::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

DSActivateGate* DSActivateGate::New(::google::protobuf::Arena* arena) const {
  DSActivateGate* n = new DSActivateGate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DSActivateGate::Clear() {
// @@protoc_insertion_point(message_clear_start:DSActivateGate)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&id_, 0, reinterpret_cast<char*>(&gate_) -
      reinterpret_cast<char*>(&id_) + sizeof(gate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DSActivateGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:DSActivateGate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 gate = 2;
      case 2: {
        if (tag == 16u) {
          set_has_gate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:DSActivateGate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:DSActivateGate)
  return false;
#undef DO_
}

void DSActivateGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:DSActivateGate)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required uint32 gate = 2;
  if (has_gate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->gate(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:DSActivateGate)
}

::google::protobuf::uint8* DSActivateGate::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:DSActivateGate)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required uint32 gate = 2;
  if (has_gate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->gate(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSActivateGate)
  return target;
}

size_t DSActivateGate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:DSActivateGate)
  size_t total_size = 0;

  if (has_id()) {
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_gate()) {
    // required uint32 gate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gate());
  }

  return total_size;
}
size_t DSActivateGate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSActivateGate)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 ID = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required uint32 gate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->gate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DSActivateGate::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DSActivateGate)
  GOOGLE_DCHECK_NE(&from, this);
  const DSActivateGate* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DSActivateGate>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DSActivateGate)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DSActivateGate)
    MergeFrom(*source);
  }
}

void DSActivateGate::MergeFrom(const DSActivateGate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DSActivateGate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._has_bits_[0 / 32] & 3u) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_gate()) {
      set_gate(from.gate());
    }
  }
}

void DSActivateGate::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DSActivateGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSActivateGate::CopyFrom(const DSActivateGate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSActivateGate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSActivateGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DSActivateGate::Swap(DSActivateGate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DSActivateGate::InternalSwap(DSActivateGate* other) {
  std::swap(id_, other->id_);
  std::swap(gate_, other->gate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DSActivateGate::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[6];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DSActivateGate

// required uint32 ID = 1;
bool DSActivateGate::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DSActivateGate::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void DSActivateGate::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void DSActivateGate::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 DSActivateGate::id() const {
  // @@protoc_insertion_point(field_get:DSActivateGate.ID)
  return id_;
}
void DSActivateGate::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:DSActivateGate.ID)
}

// required uint32 gate = 2;
bool DSActivateGate::has_gate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DSActivateGate::set_has_gate() {
  _has_bits_[0] |= 0x00000002u;
}
void DSActivateGate::clear_has_gate() {
  _has_bits_[0] &= ~0x00000002u;
}
void DSActivateGate::clear_gate() {
  gate_ = 0u;
  clear_has_gate();
}
::google::protobuf::uint32 DSActivateGate::gate() const {
  // @@protoc_insertion_point(field_get:DSActivateGate.gate)
  return gate_;
}
void DSActivateGate::set_gate(::google::protobuf::uint32 value) {
  set_has_gate();
  gate_ = value;
  // @@protoc_insertion_point(field_set:DSActivateGate.gate)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPSFinished::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPSFinished::MPSFinished()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPSFinished)
}
MPSFinished::MPSFinished(const MPSFinished& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MPSFinished)
}

void MPSFinished::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

MPSFinished::~MPSFinished() {
  // @@protoc_insertion_point(destructor:MPSFinished)
  SharedDtor();
}

void MPSFinished::SharedDtor() {
}

void MPSFinished::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPSFinished::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[7].descriptor;
}

const MPSFinished& MPSFinished::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

MPSFinished* MPSFinished::New(::google::protobuf::Arena* arena) const {
  MPSFinished* n = new MPSFinished;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPSFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:MPSFinished)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MPSFinished::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MPSFinished)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MPSFinished)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MPSFinished)
  return false;
#undef DO_
}

void MPSFinished::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MPSFinished)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MPSFinished)
}

::google::protobuf::uint8* MPSFinished::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MPSFinished)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPSFinished)
  return target;
}

size_t MPSFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MPSFinished)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPSFinished::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPSFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const MPSFinished* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPSFinished>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPSFinished)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPSFinished)
    MergeFrom(*source);
  }
}

void MPSFinished::MergeFrom(const MPSFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPSFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void MPSFinished::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPSFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPSFinished::CopyFrom(const MPSFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPSFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSFinished::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MPSFinished::Swap(MPSFinished* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPSFinished::InternalSwap(MPSFinished* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPSFinished::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[7];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPSFinished

// required uint32 ID = 1;
bool MPSFinished::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MPSFinished::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MPSFinished::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MPSFinished::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MPSFinished::id() const {
  // @@protoc_insertion_point(field_get:MPSFinished.ID)
  return id_;
}
void MPSFinished::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MPSFinished.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MPSProductRetrived::kIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MPSProductRetrived::MPSProductRetrived()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_proto_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:MPSProductRetrived)
}
MPSProductRetrived::MPSProductRetrived(const MPSProductRetrived& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:MPSProductRetrived)
}

void MPSProductRetrived::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
}

MPSProductRetrived::~MPSProductRetrived() {
  // @@protoc_insertion_point(destructor:MPSProductRetrived)
  SharedDtor();
}

void MPSProductRetrived::SharedDtor() {
}

void MPSProductRetrived::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MPSProductRetrived::descriptor() {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[8].descriptor;
}

const MPSProductRetrived& MPSProductRetrived::default_instance() {
  protobuf_proto_2eproto::InitDefaults();
  return *internal_default_instance();
}

MPSProductRetrived* MPSProductRetrived::New(::google::protobuf::Arena* arena) const {
  MPSProductRetrived* n = new MPSProductRetrived;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MPSProductRetrived::Clear() {
// @@protoc_insertion_point(message_clear_start:MPSProductRetrived)
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MPSProductRetrived::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:MPSProductRetrived)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1;
      case 1: {
        if (tag == 8u) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:MPSProductRetrived)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:MPSProductRetrived)
  return false;
#undef DO_
}

void MPSProductRetrived::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:MPSProductRetrived)
  // required uint32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:MPSProductRetrived)
}

::google::protobuf::uint8* MPSProductRetrived::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic;  // Unused
  // @@protoc_insertion_point(serialize_to_array_start:MPSProductRetrived)
  // required uint32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MPSProductRetrived)
  return target;
}

size_t MPSProductRetrived::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MPSProductRetrived)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required uint32 ID = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MPSProductRetrived::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:MPSProductRetrived)
  GOOGLE_DCHECK_NE(&from, this);
  const MPSProductRetrived* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MPSProductRetrived>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:MPSProductRetrived)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:MPSProductRetrived)
    MergeFrom(*source);
  }
}

void MPSProductRetrived::MergeFrom(const MPSProductRetrived& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MPSProductRetrived)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_id()) {
    set_id(from.id());
  }
}

void MPSProductRetrived::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:MPSProductRetrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MPSProductRetrived::CopyFrom(const MPSProductRetrived& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MPSProductRetrived)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MPSProductRetrived::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void MPSProductRetrived::Swap(MPSProductRetrived* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MPSProductRetrived::InternalSwap(MPSProductRetrived* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MPSProductRetrived::GetMetadata() const {
  protobuf_proto_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_proto_2eproto::file_level_metadata[8];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MPSProductRetrived

// required uint32 ID = 1;
bool MPSProductRetrived::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MPSProductRetrived::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MPSProductRetrived::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MPSProductRetrived::clear_id() {
  id_ = 0u;
  clear_has_id();
}
::google::protobuf::uint32 MPSProductRetrived::id() const {
  // @@protoc_insertion_point(field_get:MPSProductRetrived.ID)
  return id_;
}
void MPSProductRetrived::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:MPSProductRetrived.ID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
